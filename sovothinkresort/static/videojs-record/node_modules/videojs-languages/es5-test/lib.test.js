/* global suite, setup, teardown, test */

'use strict';

var _templateObject = _taggedTemplateLiteral(['\n        videojs.addLanguage(\'x\', {\n          "x": true\n        });\n      '], ['\n        videojs.addLanguage(\'x\', {\n          "x": true\n        });\n      ']),
    _templateObject2 = _taggedTemplateLiteral(['\n        videojs.addLanguage(\'y\', {\n          "y": true\n        });\n      '], ['\n        videojs.addLanguage(\'y\', {\n          "y": true\n        });\n      ']);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var _chai = require('chai');

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _mockFs = require('mock-fs');

var _mockFs2 = _interopRequireDefault(_mockFs);

var _tsmlb = require('tsmlb');

var _tsmlb2 = _interopRequireDefault(_tsmlb);

var _es5Lib = require('../es5/lib');

suite('lib', function () {

  setup(function () {
    (0, _mockFs2['default'])({
      a: {
        b: {
          'x.json': '{"x":true}',
          'i.txt': 'hello there',
          'y.json': '{"y":true}'
        }
      },
      b: {
        'z.json': '{"z":true}',
        'j.js': 'alert("ignore me")'
      }
    });
  });

  teardown(function () {
    _mockFs2['default'].restore();
  });

  test('nonEmptyStr', function () {
    _chai.assert.ok((0, _es5Lib.nonEmptyStr)('foo'));
    _chai.assert.ok((0, _es5Lib.nonEmptyStr)('  bar\t'));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)(''));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)('   '));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)('\r\n'));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)(null));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)());
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)({}));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)([]));
    _chai.assert.notOk((0, _es5Lib.nonEmptyStr)(true));
  });

  test('normalizePatterns', function () {
    _chai.assert.sameMembers((0, _es5Lib.normalizePatterns)(), ['lang/*.json']);
    _chai.assert.sameMembers((0, _es5Lib.normalizePatterns)(['', null]), ['lang/*.json']);
    _chai.assert.sameMembers((0, _es5Lib.normalizePatterns)(['x', '', 'y']), ['x', 'y']);
    _chai.assert.sameMembers((0, _es5Lib.normalizePatterns)('x/y/z'), ['x/y/z']);
  });

  test('normalizeDir', function () {
    _chai.assert.isUndefined((0, _es5Lib.normalizeDir)(''));
    _chai.assert.strictEqual((0, _es5Lib.normalizeDir)('foo'), 'foo');
    _chai.assert.strictEqual((0, _es5Lib.normalizeDir)('foo/bar/baz'), 'foo/bar/baz');
  });

  test('destination', function () {
    _chai.assert.strictEqual((0, _es5Lib.destination)('/path/to/foo.json'), '/path/to/foo.js');
    _chai.assert.strictEqual((0, _es5Lib.destination)('/path/to/foo.json', '/other/path'), '/other/path/foo.js');
  });

  test('findSources', function () {
    _chai.assert.lengthOf((0, _es5Lib.findSources)(), 0);

    _chai.assert.sameMembers((0, _es5Lib.findSources)(['a/**/*']), ['a/b/x.json', 'a/b/y.json']);

    _chai.assert.sameMembers((0, _es5Lib.findSources)(['a/b/*.json', 'b/*']), ['a/b/x.json', 'a/b/y.json', 'b/z.json']);
  });

  test('processSources', function () {
    var srces = (0, _es5Lib.processSources)((0, _es5Lib.findSources)(['a/**/*']), (0, _es5Lib.normalizeDir)('c'));

    _chai.assert.sameMembers(srces, ['c/x.js', 'c/y.js']);

    _chai.assert.strictEqual(_fs2['default'].readFileSync('c/x.js', 'utf8'), (0, _tsmlb2['default'])(_templateObject));

    _chai.assert.strictEqual(_fs2['default'].readFileSync('c/y.js', 'utf8'), (0, _tsmlb2['default'])(_templateObject2));
  });
});